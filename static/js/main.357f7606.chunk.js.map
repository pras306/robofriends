{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","constants.js","Containers/App.js","actions.js","serviceWorker.js","reducer.js","index.js"],"names":["Card","className","src","this","props","id","alt","name","email","Component","CardList","robots","map","user","SeachBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","SearchBox","connect","state","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","combineReducers","actions","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","createLogger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.357f7606.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Card extends Component{\t\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img src={`https://robohash.org/${this.props.id}?size=200x200`} alt='Robot'/>\r\n\t\t\t<div>\r\n\t\t\t<h2>{this.props.name}</h2>\r\n\t\t\t<p>{this.props.email}</p>\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\t\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map(user => {\r\n\t\t\t\t\treturn <Card key={user.id} id={user.id} name={user.name} email={user.email} />\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SeachBox = ({searchField, searchChange}) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='Search robots' \r\n\t\t\tonChange={searchChange} />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default SeachBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={{overflowY:'scroll', border: '5px solid black', height:'80vh'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default Scroll;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\n\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\n\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../Components/CardList.js';\r\nimport SearchBox from '../Components/SearchBox.js';\r\nimport Scroll from '../Components/Scroll.js';\r\nimport './App.css';\r\nimport {setSearchField, requestRobots} from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\t\t\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange : (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component{\r\n\r\n\tcomponentDidMount(){\t\t\r\n\t\tthis.props.onRequestRobots();\r\n\t}\t\r\n\trender(){\t\t\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter( robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t});\t\t\r\n\t\treturn(\r\n\t\t\t(isPending) ? <h1>Loading</h1> :\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1>RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange = {onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t</Scroll>\t\t\t\t\r\n\t\t\t</div>\t\t\t\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, actions = {}) => {    \r\n    switch(actions.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n        return Object.assign({}, state, {searchField: actions.payload});\r\n        default:\r\n        return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, actions = {}) => {\r\n    switch(actions.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n        return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n        return Object.assign({}, state, {robots: actions.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n        return Object.assign({}, state, {error: actions.payload, isPending: false});\r\n        default:\r\n        return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport createLogger from 'redux-logger';\r\nimport './index.css';\r\nimport App from './Containers/App';\r\nimport 'tachyons';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {searchRobots, requestRobots} from './reducer';\r\n\r\nconst rootReducer = combineReducers({searchRobots, requestRobots});\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, createLogger));\r\n\r\nReactDOM.render(\r\n\t<Provider  store = {store}><App /></Provider>,\r\n\tdocument.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}